{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-702852b2-09ea-4fb0-b6ac-a67a04cffe80",
              "name": "yaml.github-actions.security.run-shell-injection.run-shell-injection",
              "shortDescription": {
                "text": "Semgrep Finding: yaml.github-actions.security.run-shell-injection.run-shell-injection"
              },
              "fullDescription": {
                "text": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection",
              "help": {
                "text": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection)\n - [https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections](https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections)\n - [https://securitylab.github.com/research/github-actions-untrusted-input/](https://securitylab.github.com/research/github-actions-untrusted-input/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "yaml.github-actions.security.run-shell-injection.run-shell-injection"
                ]
              }
            },
            {
              "id": "glog-4356eba8-6eaf-4f25-8232-08c1159301dc",
              "name": "yaml.github-actions.security.run-shell-injection.run-shell-injection",
              "shortDescription": {
                "text": "Semgrep Finding: yaml.github-actions.security.run-shell-injection.run-shell-injection"
              },
              "fullDescription": {
                "text": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection",
              "help": {
                "text": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection)\n - [https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections](https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections)\n - [https://securitylab.github.com/research/github-actions-untrusted-input/](https://securitylab.github.com/research/github-actions-untrusted-input/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "yaml.github-actions.security.run-shell-injection.run-shell-injection"
                ]
              }
            },
            {
              "id": "glog-5382c16c-a32e-4158-a9d0-fc09768c5337",
              "name": "dockerfile.security.missing-user.missing-user",
              "shortDescription": {
                "text": "Semgrep Finding: dockerfile.security.missing-user.missing-user"
              },
              "fullDescription": {
                "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user",
              "help": {
                "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/dockerfile.security.missing-user.missing-user)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "dockerfile.security.missing-user.missing-user"
                ]
              }
            },
            {
              "id": "glog-793c923d-c55c-4666-aea5-302215cf9429",
              "name": "javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls"
              },
              "fullDescription": {
                "text": "If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\""
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls",
              "help": {
                "text": "If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\"\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\"\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls)\n - [https://node-postgres.com/features/ssl](https://node-postgres.com/features/ssl)\n - [https://nodejs.org/api/tls.html#tls_class_tls_tlssocket](https://nodejs.org/api/tls.html#tls_class_tls_tlssocket)\n - [https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options](https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options)\n - [https://nodejs.org/api/tls.html#tls_tls_default_min_version](https://nodejs.org/api/tls.html#tls_tls_default_min_version)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls"
                ]
              }
            },
            {
              "id": "glog-ffbf0567-6eaf-4651-b024-eddb8fce4d23",
              "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
              },
              "fullDescription": {
                "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
              "help": {
                "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection)\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
                ]
              }
            },
            {
              "id": "glog-a14f7379-b784-488a-851c-b7824ad39881",
              "name": "javascript.express.security.audit.express-open-redirect.express-open-redirect",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-open-redirect.express-open-redirect"
              },
              "fullDescription": {
                "text": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-open-redirect.express-open-redirect",
              "help": {
                "text": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-open-redirect.express-open-redirect)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-open-redirect.express-open-redirect"
                ]
              }
            },
            {
              "id": "glog-559db094-75d6-437f-80e5-4ed3da056477",
              "name": "javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization"
              },
              "fullDescription": {
                "text": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from()."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization",
              "help": {
                "text": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization"
                ]
              }
            },
            {
              "id": "glog-1669147b-cde1-42bc-ad77-361f0217ec09",
              "name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
              "shortDescription": {
                "text": "Semgrep Finding: yaml.docker-compose.security.no-new-privileges.no-new-privileges"
              },
              "fullDescription": {
                "text": "Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
              "help": {
                "text": "Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges)\n - [https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/](https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "yaml.docker-compose.security.no-new-privileges.no-new-privileges"
                ]
              }
            },
            {
              "id": "glog-b226f886-08d1-4c60-af41-b212195ce344",
              "name": "javascript.express.security.audit.express-libxml-noent.express-libxml-noent",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-libxml-noent.express-libxml-noent"
              },
              "fullDescription": {
                "text": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-libxml-noent.express-libxml-noent",
              "help": {
                "text": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-libxml-noent.express-libxml-noent)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-libxml-noent.express-libxml-noent"
                ]
              }
            },
            {
              "id": "glog-58628f87-aaa6-4630-bfee-994715b22c1e",
              "name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
              "shortDescription": {
                "text": "Semgrep Finding: yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service"
              },
              "fullDescription": {
                "text": "Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
              "help": {
                "text": "Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service)\n - [https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir](https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir)\n - [https://blog.atomist.com/security-of-docker-kubernetes/](https://blog.atomist.com/security-of-docker-kubernetes/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service"
                ]
              }
            },
            {
              "id": "glog-ee70c802-bd82-4a1b-8955-aac005b7d438",
              "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
              },
              "fullDescription": {
                "text": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
              "help": {
                "text": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal)\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal"
                ]
              }
            },
            {
              "id": "glog-d5d8f3f9-ec28-43de-816a-7187b79f2f46",
              "name": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name"
              },
              "fullDescription": {
                "text": "Donâ€™t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name",
              "help": {
                "text": "Donâ€™t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Donâ€™t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name"
                ]
              }
            },
            {
              "id": "glog-cdb04f7c-6a6b-4aae-b024-a2a4ff55ca62",
              "name": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage"
              },
              "fullDescription": {
                "text": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
              "help": {
                "text": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage)\n - [https://www.npmjs.com/package/csurf](https://www.npmjs.com/package/csurf)\n - [https://www.npmjs.com/package/csrf](https://www.npmjs.com/package/csrf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage"
                ]
              }
            },
            {
              "id": "glog-99b994cc-3e86-40f5-b4d7-747c74c637b4",
              "name": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain",
              "help": {
                "text": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain"
                ]
              }
            },
            {
              "id": "glog-fa4f79cb-d5c6-4bfa-9ee1-c404eee9c3bd",
              "name": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires",
              "help": {
                "text": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires"
                ]
              }
            },
            {
              "id": "glog-b284d8be-7ee7-46d1-a1c5-173c484e1ee7",
              "name": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly",
              "help": {
                "text": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly"
                ]
              }
            },
            {
              "id": "glog-d935819d-fea1-4c9f-ad2e-e5c1f72adfbe",
              "name": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure",
              "help": {
                "text": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure"
                ]
              }
            },
            {
              "id": "glog-ba2f9145-c1f3-4cc6-85b0-e159234753a8",
              "name": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path",
              "help": {
                "text": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path"
                ]
              }
            },
            {
              "id": "glog-6468b3f7-e2e4-4b0d-9c8b-d150851ebf90",
              "name": "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
              },
              "fullDescription": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "help": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape)\n - [http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/](http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-6ab8a9f5-7a32-4ad1-8226-25807dc126c7",
              "name": "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
              },
              "fullDescription": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "help": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape)\n - [http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/](http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-728d43f2-6427-4a61-a3f3-fbaae179fd35",
              "name": "javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret",
              "help": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret"
                ]
              }
            },
            {
              "id": "glog-13f22828-1508-4cf0-aa26-6d69a42178b3",
              "name": "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
              },
              "fullDescription": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "help": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape)\n - [http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/](http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-2bfdd9b5-2e8d-49f1-8383-5d424338c165",
              "name": "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
              },
              "fullDescription": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "help": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape)\n - [http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/](http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-9544c492-5ccf-45bf-bf20-e10e0aa2cd63",
              "name": "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
              },
              "fullDescription": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "help": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape)\n - [http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/](http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-e929427a-8585-449a-8a69-c4910125d1ff",
              "name": "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "shortDescription": {
                "text": "Semgrep Finding: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
              },
              "fullDescription": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape",
              "help": {
                "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape)\n - [http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/](http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-702852b2-09ea-4fb0-b6ac-a67a04cffe80",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/glog-action/action.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 7,
                  "endLine": 56,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      run: |\n        TOOL_CMD=\"${{ github.action_path }}/glog.sh scan --path $GITHUB_WORKSPACE\"\n        if [ ! -z \"${{ inputs.lang }}\" ]; then\n          TOOL_CMD+=\" --lang ${{ inputs.lang }}\"\n        fi\n        if [ ! -z \"${{ inputs.ignore }}\" ]; then\n          TOOL_CMD+=\" --ignore ${{ inputs.ignore }}\"\n        fi\n        if [ ! -z \"${{ inputs.client }}\" ]; then\n          TOOL_CMD+=\" --client ${{ inputs.client }}\"\n        fi\n        $TOOL_CMD"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-5382c16c-a32e-4158-a9d0-fc09768c5337",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 35,
                  "snippet": {
                    "text": "CMD [\"bash\", \"/app/entrypoint.sh\"]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ffbf0567-6eaf-4651-b024-eddb8fce4d23",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/appHandler.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 21,
                  "endLine": 11,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tdb.sequelize.query(query, {"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-4356eba8-6eaf-4f25-8232-08c1159301dc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/glog-action/action.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 7,
                  "endLine": 41,
                  "endColumn": 108,
                  "snippet": {
                    "text": "      run: echo \"${{ inputs.github-token }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-793c923d-c55c-4666-aea5-302215cf9429",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/db.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 18,
                  "endLine": 8,
                  "endColumn": 2,
                  "snippet": {
                    "text": "module.exports = {\n  username: process.env.MYSQL_USER,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE,\n  host: process.env.MYSQL_HOST || 'mysql-db',\n  port: process.env.MYSQL_PORT || 3306,\n  dialect: 'mysql'\n}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-a14f7379-b784-488a-851c-b7824ad39881",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The application redirects to a URL specified by user-supplied input `req` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/appHandler.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 16,
                  "endLine": 188,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\tres.redirect(req.query.url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-559db094-75d6-437f-80e5-4ed3da056477",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The following function call serialize.unserialize accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from()."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/appHandler.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 18,
                  "endLine": 218,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\t\tvar products = serialize.unserialize(req.files.products.data.toString('utf8'))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-1669147b-cde1-42bc-ad77-361f0217ec09",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Service 'mysql-db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "docker-compose.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 18,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  mysql-db:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-58628f87-aaa6-4630-bfee-994715b22c1e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Service 'mysql-db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "docker-compose.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 18,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  mysql-db:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-b226f886-08d1-4c60-af41-b212195ce344",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/appHandler.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 42,
                  "endLine": 235,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\t\tvar products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), {noent:true,noblanks:true})"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-d5d8f3f9-ec28-43de-816a-7187b79f2f46",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Donâ€™t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "app.use(session({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ee70c802-bd82-4a1b-8955-aac005b7d438",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 55,
                  "endLine": 43,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    var model = sequelize.import(path.join(__dirname, file));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-cdb04f7c-6a6b-4aae-b024-a2a4ff55ca62",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "endLine": 11,
                  "endColumn": 20,
                  "snippet": {
                    "text": "var app = express()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-fa4f79cb-d5c6-4bfa-9ee1-c404eee9c3bd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "app.use(session({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-99b994cc-3e86-40f5-b4d7-747c74c637b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "app.use(session({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-b284d8be-7ee7-46d1-a1c5-173c484e1ee7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "app.use(session({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-d935819d-fea1-4c9f-ad2e-e5c1f72adfbe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "app.use(session({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ba2f9145-c1f3-4cc6-85b0-e159234753a8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 3,
                  "snippet": {
                    "text": "app.use(session({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-6ab8a9f5-7a32-4ad1-8226-25807dc126c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                <td><%- output.products[i].id %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-728d43f2-6427-4a61-a3f3-fbaae179fd35",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 24,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  secret: 'keyboard cat',"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-6468b3f7-e2e4-4b0d-9c8b-d150851ebf90",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 71,
                  "endLine": 20,
                  "endColumn": 95,
                  "snippet": {
                    "text": "                Listing products with <strong>search query: </strong> <%- output.searchTerm %>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-13f22828-1508-4cf0-aa26-6d69a42178b3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 21,
                  "endLine": 50,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                <td><%- output.products[i].name %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-9544c492-5ccf-45bf-bf20-e10e0aa2cd63",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 21,
                  "endLine": 53,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                <td><%- output.products[i].description %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-e929427a-8585-449a-8a69-c4910125d1ff",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 21,
                  "endLine": 51,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                <td><%- output.products[i].code %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-2bfdd9b5-2e8d-49f1-8383-5d424338c165",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/app/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 21,
                  "endLine": 52,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                <td><%- output.products[i].tags %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "requires login"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}